package com.example.recipesapp.dto;

import com.example.recipesapp.model.Ingredient;
import com.example.recipesapp.model.Recipe;
import lombok.AllArgsConstructor;
import lombok.Data;

import java.util.List;
@Data
@AllArgsConstructor
public class RecipeDTO {
    private final int id;
    private final String nameRecipe;
    private final int cookedTime;
    private final List<Ingredient> ingredients;
    private final List<String> cookingSteps;


    //Статическая фабрика
    public static RecipeDTO from(int id, Recipe recipe) {
        return new RecipeDTO(id, recipe.getNameRecipe(), recipe.getCookedTime(),
                recipe.getIngredients(), recipe.getCookingSteps());

    }


// DTO (Data Transfer Object) в Java используется для передачи данных между слоями приложения или между приложениями.
// Он представляет собой объект, который содержит только необходимые данные для выполнения определенной операции.
// DTO позволяет уменьшить количество запросов к базе данных и ускорить работу приложения, так как он позволяет
// передавать только необходимые данные, а не всю сущность. Кроме того, DTO может использоваться для скрытия конфиденциальных
// данных, таких как пароли или личная информация, от пользователей, которые не имеют к ним доступа.

// Статическая фабрика в Java используется для создания объектов без необходимости создания экземпляра класса.
// Она предоставляет статические методы для создания объектов, что позволяет упростить код и улучшить производительность.
// Статическая фабрика может быть полезна в следующих случаях:
// * Когда создание объекта требует сложной логики или множества шагов, которые необходимо выполнить до создания объекта.
// * Когда необходимо создавать объекты, которые могут быть кэшированы и повторно использованы.
// * Когда необходимо создавать объекты, которые должны быть созданы только один раз во время выполнения приложения.
// * Когда необходимо создавать объекты, которые должны быть созданы с использованием определенных параметров.
//
//Статическая фабрика может быть реализована с помощью статических методов в классе или с помощью отдельного класса-фабрики.
}
